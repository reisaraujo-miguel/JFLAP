plugins {
    id 'java'
    id 'application'
    id "io.github.jwharm.flatpak-gradle-generator" version "1.5.0"
}

repositories {
    mavenCentral()
    maven { url "./offline-repository" }
}

dependencies {
    // Modern SVG library - replacing Batik 1.17
    implementation 'org.apache.xmlgraphics:batik-svggen:1.19'
    implementation 'org.apache.xmlgraphics:batik-swing:1.19'
    implementation 'org.apache.xmlgraphics:batik-transcoder:1.19'
    implementation 'org.apache.xmlgraphics:batik-dom:1.19'
    implementation 'org.apache.xmlgraphics:batik-bridge:1.19'
    implementation 'org.apache.xmlgraphics:batik-util:1.19'

    // Testing dependencies
    testImplementation 'junit:junit:4.13.2'

    // Remove unused dependencies: rhino-1.7.7.jar, fop-transcoder-allinone-2.9.jar
    // xml-apis-1.4.01.jar and xml-apis-ext-1.3.04.jar are replaced by modern Java XML APIs
    // xerces:xercesImpl is no longer needed as Java has built-in XML processing
}

java {
    sourceCompatibility = JavaVersion.VERSION_25
    targetCompatibility = JavaVersion.VERSION_25
}

application {
    mainClass = 'gui.Main'
}

// Include all source directories
def sourceDirs = []
file('.').listFiles().each { dir ->
    if (dir.isDirectory() && dir.name != 'build' && dir.name != 'gradle' && dir.name != 'lib' && dir.name != '.git' && dir.name != 'src') {
        sourceDirs += dir.path
    }
}

sourceSets {
    main {
        java {
            srcDirs = sourceDirs
        }
        resources {
            srcDirs = ['.']
            includes = ['ICON/**', 'MEDIA/**', 'DOCS/**', 'META-INF/**']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

run {
    // Ensure resources are available during runtime
    classpath = sourceSets.main.runtimeClasspath
    systemProperty "java.class.path", classpath.asPath

    // Explicitly include resource directories in runtime
    workingDir = projectDir
}

jar {
    manifest {
        attributes(
            'Main-Class': 'gui.Main',
            'Implementation-Title': 'JFLAP-NG',
            'Implementation-Version': '4.0',
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date(),
            'Built-JDK': System.getProperty('java.version')
        )
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Include all resource directories
    from('ICON') {
        into 'ICON'
    }
    from('MEDIA') {
        into 'MEDIA'
    }
    from('DOCS') {
        into 'DOCS'
    }
    from('META-INF') {
        into 'META-INF'
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'gui.Main'
    }
    archiveBaseName = 'JFLAP-NG_Fat'
    archiveClassifier = 'fat'
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.flatpakGradleGenerator {
  outputFile = file("flatpak-sources.json")
  downloadDirectory = "./offline-repository"
  excludeConfigurations = ["testCompileClasspath", "testRuntimeClasspath"]
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
}

